/**************************************************************************************
* Course: CS 4540 – Operating Systems – Fall 2014
* Assignment <5>  – Process Synchronization
* Name: <Waleed Gudah>
* E-mail: <waleed.h.gudah@wmich.edu>
* Submitted: <12/3/14>

   This program, upon loading, initializes the birthday struct vallues, 
   allocates memory for a struct element and creates 
   and inserts 6 birthdays into the list. 
   Then prints each birthday to to the kernel log. 
   Unloading prints the list of birthdays being removed, and 
   then deletes the list from kernel memory    

 NOTE: 
        Makefile includes several commands

        "make" to compile

        "make load" to load kernel module
        
        "make unload" to unload kernel module
        
        "make view to run the dmesg command"
        
        "make clear" to clear kernel log 

/****************************************************************************************/

The program involves modifying the internals of a working OS. You will 
write, load, and unload a Ubuntu(Linux) kernel module.

The specs are very long since--in addition to specifications for your 
program--they include examples, explanations, hints, and background 
information.

Contents of A5:
---------------
    Part I—Creating a Simple Kernel Module
       I.1. An Illustrative Program for a Simple Kernel Module
       I.2. Loading and Removing Kernel Modules
    Part II—Creating a Kernel Module Using Kernel Data Structures
       II.1. A Kernel struct and its Description
       II.2. Inserting Elements into the Kernel Linked List
       II.3. Traversing the Kernel Linked List
       II.4. Removing Elements from the Kernel Linked List
    Part III—Implement Simple Kernel Module Using Illustrative Program
    Part IV—Implement Linked List Kernel Module
    Part V—Hints
    Part VI—Additional Background Information


The solution must be compiled and run on Ubuntu under Oracle VirtualBox.

Remember about the C style and submission guidelines 









